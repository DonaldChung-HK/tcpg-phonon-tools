from pathlib import Path
from string import Template
from subprocess import run
import os
import shutil
from multiprocessing.pool import Pool
from functools import partial
import logging
from time import time

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

logger = logging.getLogger(__name__)

def exec_dftbp(pur, system_name, current_dir, result_dir, OMP_NUM_THREADS, OMP_STACKSIZE, dftb_command, path):
    logger.info(f'Starting {system_name}_{pur}')
    directory = current_dir / "run" / str(pur)

    run([f'{dftb_command} > {system_name}_{pur}.out'], cwd=directory, env={"OMP_NUM_THREADS": str(OMP_NUM_THREADS), "PATH": path, "OMP_STACKSIZE": OMP_STACKSIZE}, shell=True)

    logger.info(f'Completed {system_name}_{pur}')
    shutil.copyfile(directory / "results.tag", result_dir / f"{system_name}_{pur}.tag")
    logger.info(f'Copied {system_name}_{pur}')


def main():
    ts = time()
    ##Param
    system_name = $label
    woring_dir = Path(".")
    thread = $thread
    result_dir = Path("result")
    dftb_command = $dftb_command
    OMP_NUM_THREADS = $OMP_NUM_THREADS
    OMP_STACKSIZE = $OMP_STACKSIZE
    pur_list = $pur_list
    ###
    path_process = run(['echo $PATH'], shell=True, capture_output=True)
    path = path_process.stdout
    partial_pur = partial(
        exec_dftbp, 
        system_name = system_name, 
        current_dir = woring_dir, 
        result_dir = result_dir, 
        path = path,
        OMP_NUM_THREADS = OMP_NUM_THREADS, 
        OMP_STACKSIZE = OMP_STACKSIZE, 
        dftb_command = dftb_command, 
    )
    with Pool(thread) as p:
        p.map(partial_pur, pur_list)
    logging.info('Took %s', time() - ts)

if __name__ == '__main__':
    main()